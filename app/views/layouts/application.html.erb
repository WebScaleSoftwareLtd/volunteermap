<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Volunteermap</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link rel="icon" type="image/png" href="/favicon.png">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag "tailwind", "inter-font", "data-turbo-track": "reload" %>

    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>

    <script id="algoliasearch_script" async src="https://cdn.jsdelivr.net/npm/algoliasearch@4.18.0/dist/algoliasearch-lite.umd.js" integrity="sha256-V3GHVlMSAsogT3wL0OY/l4d3fRLa56gNzlnzdIMBIWg=" crossorigin="anonymous"></script>
    <script id="instantsearch_script" async src="https://cdn.jsdelivr.net/npm/instantsearch.js@4.56.4/dist/instantsearch.production.min.js" integrity="sha256-U62jq/Jnfr93B4FQceG9WxzOg0o6WqJShZXL20/iKXQ=" crossorigin="anonymous"></script>
    <script>
      // Load in the Google Maps async loading SDK.
      (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
        key: "<%= Rails.application.credentials.gmaps.api_key! %>",
        v: "weekly",
      });

      // Defines the configuration for the Algolia SDK.
      window.algoliaConfig = [
        "<%= Rails.application.credentials.algolia.application_id! %>",
        "<%= Rails.application.credentials.algolia.read_only_api_key! %>",
      ];

      // Defines a hook to wait for the algoliasearch logic to load.
      (function () {
        const algoliasearchWaitPromise = new Promise(res => {
          if (window.algoliasearch) return res();
          document.getElementById("algoliasearch_script").addEventListener("load", res);
        });
        const instantsearchWaitPromise = new Promise(res => {
          if (window.instantsearch) return res();
          document.getElementById("instantsearch_script").addEventListener("load", res);
        });
        window.algoliasearchWaitPromise = Promise.all([algoliasearchWaitPromise, instantsearchWaitPromise]);
      })();
    </script>
  </head>

  <body class="dark:bg-gray-900 dark:text-white">
    <%= render partial: 'layouts/navbar' %>
    <main class="w-full">
      <%= yield %>
    </main>
  </body>
</html>
